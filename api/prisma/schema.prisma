datasource DS {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = env("BINARY_TARGET")
}

// Define your own datamodels here and run `yarn redwood db save` to create
// migrations for them.

enum Gender {
  FEMALE
  MALE
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  firstName String?
  lastName String?
  lastName2 String?
  gender Gender @default(FEMALE)
  director Director?
  singer Singer?
  songs Song[]
  parts Part[]
  concerts Concert[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Singer {
  id Int @id @default(autoincrement())
  defaultPart VoiceType?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  userId Int
  concerts Concert[] @relation(references: [id])
  songs Song[] @relation(references: [id])
}

model Director {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  userId Int
  songs Song[] @relation(references: [id])
  concerts Concert[] @relation(references: [id])
}

model Song {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
  userId Int?
  concerts Concert[] @relation(references: [id])
  singer Singer @relation(fields: [singerId], references: [id])
  singerId Int
  director Director @relation(fields: [directorId], references: [id])
  directorId Int
  parts Part[] @relation(references: [id])
}

enum VoiceType {
  SOPRANO
  MEZZOSOPRANO
  CONTRALTO
  COUNTERTENOR
  TENOR
  TREBLE
  BARITONE
  BASS
}

model Part {
  id Int @id @default(autoincrement())
  voiceType VoiceType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
  userId Int?
  songs Song[] @relation(references: [id])
}

model Concert {
  id Int @id @default(autoincrement())
  dueBy DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songs Song[] @relation(references: [id])
  singers Singer[] @relation(references: [id])
  singerId Int
  director Director @relation(fields: [directorId], references: [id])
  directorId Int
}
